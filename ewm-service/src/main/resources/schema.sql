DROP TABLE IF EXISTS PUBLIC.EVENTS CASCADE;
DROP TABLE IF EXISTS PUBLIC.REQUESTS CASCADE;
DROP TABLE IF EXISTS PUBLIC.COMPILATIONS CASCADE;
DROP TABLE IF EXISTS PUBLIC.USERS;
DROP TABLE IF EXISTS PUBLIC.CATEGORIES;
DROP TABLE IF EXISTS PUBLIC.LOCATIONS;
DROP TABLE IF EXISTS PUBLIC.COMPILATION_EVENT;
DROP TABLE IF EXISTS PUBLIC.EVENT_LOCATION;
DROP TABLE IF EXISTS PUBLIC.EVENT_LOCATION_TYPE;
DROP VIEW IF EXISTS PUBLIC.V_EVENT_BY_LOCATION;
-----------------------------------------------

CREATE TABLE PUBLIC.USERS
(
    ID    BIGINT GENERATED BY DEFAULT AS IDENTITY,
    EMAIL VARCHAR(50)  NOT NULL,
    NAME  VARCHAR(100) NOT NULL,
    CONSTRAINT USERS_PK
        PRIMARY KEY (ID),
    CONSTRAINT USERS_EMAIL_UK
        UNIQUE (EMAIL)
);

CREATE TABLE PUBLIC.CATEGORIES
(
    ID   BIGINT GENERATED BY DEFAULT AS IDENTITY,
    NAME VARCHAR(50) NOT NULL,
    CONSTRAINT CATEGORIES_PK
        PRIMARY KEY (ID),
    CONSTRAINT CATEGORIES_NAME_UK
        UNIQUE (NAME)
);

CREATE TABLE PUBLIC.LOCATIONS
(
    ID  BIGINT GENERATED BY DEFAULT AS IDENTITY,
    LAT FLOAT,
    LON FLOAT,
    CONSTRAINT LOCATIONS_PK
        PRIMARY KEY (ID)
);

CREATE TABLE PUBLIC.EVENTS
(
    ID                 BIGINT GENERATED BY DEFAULT AS IDENTITY,
    ANNOTATION         VARCHAR(1024),
    CATEGORY_ID        BIGINT,
    CREATED_ON         TIMESTAMP WITHOUT TIME ZONE,
    DESCRIPTION        VARCHAR(1024),
    EVENT_DATE         TIMESTAMP WITHOUT TIME ZONE,
    INITIATOR_ID       BIGINT,
    LOCATION_ID        BIGINT,
    PAID               BOOLEAN,
    PARTICIPANT_LIMIT  INTEGER,
    PUBLISHED_ON       TIMESTAMP WITHOUT TIME ZONE,
    REQUEST_MODERATION BOOLEAN,
    STATE              VARCHAR(50),
    TITLE              VARCHAR(255),
    CONSTRAINT EVENTS_PK
        PRIMARY KEY (ID),
    CONSTRAINT EVENTS_ON_CATEGORY_FK
        FOREIGN KEY (CATEGORY_ID) REFERENCES PUBLIC.CATEGORIES (ID),
    CONSTRAINT EVENTS_ON_INITIATOR_FK
        FOREIGN KEY (INITIATOR_ID) REFERENCES PUBLIC.USERS (ID),
    CONSTRAINT EVENTS_ON_LOCATION_FK
        FOREIGN KEY (LOCATION_ID) REFERENCES PUBLIC.LOCATIONS (ID)
);

CREATE TABLE PUBLIC.REQUESTS
(
    ID           BIGINT GENERATED BY DEFAULT AS IDENTITY,
    CREATED      TIMESTAMP WITHOUT TIME ZONE,
    EVENT_ID     BIGINT,
    REQUESTER_ID BIGINT,
    STATUS       VARCHAR(50),
    CONSTRAINT REQUEST_PK
        PRIMARY KEY (ID),
    CONSTRAINT REQUEST_ON_EVENT_FK
        FOREIGN KEY (EVENT_ID) REFERENCES PUBLIC.EVENTS (ID),
    CONSTRAINT REQUEST_ON_REQUESTER_FK
        FOREIGN KEY (REQUESTER_ID) REFERENCES PUBLIC.USERS (ID)
);

CREATE TABLE PUBLIC.COMPILATIONS
(
    ID     BIGINT GENERATED BY DEFAULT AS IDENTITY,
    PINNED BOOLEAN      NOT NULL,
    TITLE  VARCHAR(255) NOT NULL,
    CONSTRAINT COMPILATIONS_PK
        PRIMARY KEY (ID)
);

CREATE TABLE PUBLIC.COMPILATION_EVENT
(
    COMPILATION_ID BIGINT NOT NULL,
    EVENT_ID       BIGINT NOT NULL,
    CONSTRAINT COMPILATION_EVENT_PK
        PRIMARY KEY (COMPILATION_ID, EVENT_ID),
    CONSTRAINT EVENT_COMPILATION_FK
        FOREIGN KEY (COMPILATION_ID) REFERENCES PUBLIC.COMPILATIONS (ID),
    CONSTRAINT COMPILATION_EVENT_FK
        FOREIGN KEY (EVENT_ID) REFERENCES PUBLIC.EVENTS (ID)
);

CREATE TABLE PUBLIC.EVENT_LOCATION_TYPE
(
    ID   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    NAME VARCHAR(255),
    CONSTRAINT EVENT_LOCATION_TYPE_PK
        PRIMARY KEY (ID),
    CONSTRAINT EVENT_LOCATION_TYPE_NAME_UK
        UNIQUE (NAME)
);

CREATE TABLE PUBLIC.EVENT_LOCATION
(
    ID               BIGINT GENERATED BY DEFAULT AS IDENTITY,
    NAME             VARCHAR(255),
    LOCATION_TYPE_ID BIGINT,
    LAT              FLOAT,
    LON              FLOAT,
    RADIUS           FLOAT,
    CONSTRAINT EVENT_LOCATION_PK
        PRIMARY KEY (ID),
    CONSTRAINT EVENT_LOCATION_NAME_UK
        UNIQUE (NAME),
    CONSTRAINT EVENT_LOCATION_ON_LOCATION_TYPE_FK
        FOREIGN KEY (LOCATION_TYPE_ID) REFERENCES PUBLIC.EVENT_LOCATION_TYPE (ID)
);

CREATE OR REPLACE FUNCTION public.distance(lat1 double precision, lon1 double precision,
                                           lat2 double precision, lon2 double precision)
    RETURNS double precision
    LANGUAGE 'plpgsql'
    IMMUTABLE STRICT
AS
'
DECLARE
    dist      float = 0;
    rad_lat1  float;
    rad_lat2  float;
    theta     float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
        THEN
            dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
';

CREATE OR REPLACE VIEW PUBLIC.V_EVENT_BY_LOCATION
AS SELECT ROW_NUMBER() OVER () AS ID,
          E.ID AS EVENT_ID,
          E.ANNOTATION,
          E.CATEGORY_ID,
          C.NAME AS CATEGORY_NAME,
          E.CREATED_ON,
          E.DESCRIPTION,
          E.EVENT_DATE,
          E.INITIATOR_ID,
          U.EMAIL AS INITIATOR_EMAIL,
          U.NAME AS INITIATOR_NAME,
          E.LOCATION_ID,
          L.LAT,
          L.LON,
          E.PAID,
          E.PARTICIPANT_LIMIT,
          E.PUBLISHED_ON,
          E.REQUEST_MODERATION,
          E.STATE,
          E.TITLE,
          EL.ID AS EVENT_LOCATION_ID,
          EL.NAME AS EVENT_LOCATION_NAME,
          ELT.ID AS EVENT_LOCATION_TYPE_ID,
          ELT.NAME AS EVENT_LOCATION_TYPE,
          EL.LAT AS EVENT_LOCATION_LAT,
          EL.LON AS EVENT_LOCATION_LON,
          EL.RADIUS AS EVENT_LOCATION_RADIUS,
          DISTANCE(L.LAT, L.LON, EL.LAT, EL.LON) AS DISTANCE
   FROM EVENTS E
            JOIN CATEGORIES C ON E.CATEGORY_ID = C.ID
            JOIN USERS U ON E.INITIATOR_ID = U.ID
            LEFT JOIN LOCATIONS L ON E.LOCATION_ID = L.ID
            LEFT JOIN EVENT_LOCATION EL ON DISTANCE(L.LAT, L.LON, EL.LAT, EL.LON) <= EL.RADIUS
            LEFT JOIN EVENT_LOCATION_TYPE ELT ON EL.LOCATION_TYPE_ID = ELT.ID
   WHERE EL.ID IS NOT NULL;


